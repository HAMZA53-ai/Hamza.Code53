import React, { useState } from 'react';
import { generateWebsite, WebTechStack } from '../services/geminiService';
import * as creationsService from '../services/creationsService';
import Spinner from './Spinner';
import WebsiteIcon from './icons/WebsiteIcon';
import ExternalLinkIcon from './icons/ExternalLinkIcon';

const WebsiteGenerator: React.FC = () => {
  const [prompt, setPrompt] = useState('');
  const [techStack, setTechStack] = useState<WebTechStack>('tailwind');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [generatedCode, setGeneratedCode] = useState<string | null>(null);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!prompt.trim()) {
      setError('الرجاء إدخال وصف للموقع.');
      return;
    }
    setIsLoading(true);
    setError(null);
    setGeneratedCode(null);
    
    const creationId = creationsService.addCreation({
      type: 'Website',
      prompt,
      status: 'pending',
    });

    try {
      let code = await generateWebsite(prompt, techStack);
      
      const watermarkHTML = `
<div style="position: fixed; bottom: 10px; right: 10px; z-index: 9999; background-color: rgba(0, 0, 0, 0.5); color: rgba(255, 255, 255, 0.7); padding: 5px 10px; border-radius: 5px; font-family: sans-serif; font-size: 12px; pointer-events: none;">
  Generated by حمزة سوبر
</div>`;

      if (techStack !== 'react-tailwind' && code.includes('</body>')) {
        code = code.replace('</body>', `${watermarkHTML}\n</body>`);
      } else if (techStack !== 'react-tailwind') {
        code += watermarkHTML;
      }

      setGeneratedCode(code);
      creationsService.updateCreation(creationId, {
        status: 'completed',
        data: code,
      });
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'حدث خطأ غير متوقع.';
      setError(errorMessage);
       creationsService.updateCreation(creationId, {
        status: 'failed',
        error: errorMessage,
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handlePreview = () => {
    if (!generatedCode) return;
    const blob = new Blob([generatedCode], { type: 'text/html' });
    const url = URL.createObjectURL(blob);
    window.open(url, '_blank', 'noopener,noreferrer');
  };

  const getFileExtension = () => {
    switch (techStack) {
      case 'react-tailwind': return 'jsx';
      default: return 'html';
    }
  };

  return (
    <div className="flex flex-col h-full overflow-hidden">
      <div className="p-4 md:p-6 bg-white/80 dark:bg-slate-900/80 backdrop-blur-sm border-b border-gray-200 dark:border-slate-700">
        <form onSubmit={handleSubmit} className="max-w-4xl mx-auto flex flex-col gap-4">
          <h2 className="text-xl font-bold text-green-600 dark:text-green-300 mb-2 text-center">مولد المواقع بالذكاء الاصطناعي</h2>
          <textarea
            value={prompt}
            onChange={(e) => setPrompt(e.target.value)}
            placeholder="مثال: صفحة هبوط لتطبيق جوال متخصص في تتبع اللياقة البدنية..."
            className="w-full bg-slate-100 dark:bg-slate-800 border border-slate-300 dark:border-slate-600 rounded-lg p-3 text-slate-800 dark:text-white placeholder-slate-400 dark:placeholder-slate-400 resize-none focus:ring-2 focus:ring-green-500 focus:outline-none transition"
            rows={3}
            disabled={isLoading}
          />
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label htmlFor="techStack" className="block text-sm font-medium text-slate-600 dark:text-slate-300 mb-1">التقنية المستخدمة</label>
              <select
                id="techStack"
                value={techStack}
                onChange={(e) => setTechStack(e.target.value as WebTechStack)}
                disabled={isLoading}
                className="w-full bg-slate-100 dark:bg-slate-800 border border-slate-300 dark:border-slate-600 rounded-lg p-2 text-slate-800 dark:text-white focus:ring-2 focus:ring-green-500 focus:outline-none"
              >
                <option value="tailwind">HTML + Tailwind CSS</option>
                <option value="html-css">HTML + Inline CSS</option>
                <option value="react-tailwind">React + Tailwind CSS</option>
              </select>
            </div>
            <button
              type="submit"
              disabled={isLoading || !prompt.trim()}
              className="md:self-end w-full h-10 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-500 disabled:bg-slate-400 dark:disabled:bg-slate-600 disabled:cursor-not-allowed transition-colors font-semibold flex items-center justify-center"
            >
              {isLoading ? 'جارٍ البناء...' : 'توليد الموقع'}
            </button>
          </div>
        </form>
      </div>
      <div className="flex-1 overflow-y-auto p-4 md:p-6">
        {isLoading && (
          <div className="flex flex-col items-center justify-center h-full text-center text-slate-500 dark:text-slate-400">
            <Spinner />
            <p className="mt-4">يقوم الذكاء الاصطناعي ببناء موقعك...</p>
          </div>
        )}
        {error && <p className="text-center text-red-600 dark:text-red-400 bg-red-100 dark:bg-red-800/20 p-3 rounded-lg">{error}</p>}
        {generatedCode && (
          <div className="max-w-4xl mx-auto">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-semibold">الكود المصدري ({getFileExtension()})</h3>
              {techStack !== 'react-tailwind' && (
                <button
                  onClick={handlePreview}
                  className="px-4 py-2 bg-teal-600 text-white rounded-lg hover:bg-teal-500 transition-colors font-semibold flex items-center gap-2"
                >
                  <ExternalLinkIcon className="w-5 h-5" />
                  معاينة حية
                </button>
              )}
            </div>
            <pre className="bg-slate-100 dark:bg-slate-800 p-4 rounded-lg overflow-x-auto text-sm text-slate-700 dark:text-slate-300 border border-slate-200 dark:border-slate-700">
              <code className="whitespace-pre">{generatedCode}</code>
            </pre>
          </div>
        )}
        {!isLoading && !generatedCode && !error && (
          <div className="flex flex-col items-center justify-center h-full text-center text-slate-500">
            <WebsiteIcon className="w-24 h-24 mb-4" />
            <h3 className="text-lg font-semibold text-slate-600 dark:text-slate-400">حوّل فكرتك إلى موقع ويب</h3>
            <p>اكتب وصفاً واختر التقنية، ثم دع الذكاء الاصطناعي يبرمجه لك.</p>
          </div>
        )}
      </div>
    </div>
  );
};

export default WebsiteGenerator;
